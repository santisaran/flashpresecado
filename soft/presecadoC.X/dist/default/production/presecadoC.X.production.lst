

Microchip Technology PIC LITE Macro Assembler V1.31 build 56723 
                                                                                               Thu Apr 24 00:06:55 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 56723
     1                           	processor	16F818
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	intentry,global,class=CODE,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	swtext1,local,class=CONST,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	dabs	1,0x7E,2
    24  0000                     	;# 
    25  0001                     	;# 
    26  0002                     	;# 
    27  0003                     	;# 
    28  0004                     	;# 
    29  0005                     	;# 
    30  0006                     	;# 
    31  000A                     	;# 
    32  000B                     	;# 
    33  000C                     	;# 
    34  000D                     	;# 
    35  000E                     	;# 
    36  000E                     	;# 
    37  000F                     	;# 
    38  0010                     	;# 
    39  0011                     	;# 
    40  0012                     	;# 
    41  0013                     	;# 
    42  0014                     	;# 
    43  0015                     	;# 
    44  0015                     	;# 
    45  0016                     	;# 
    46  0017                     	;# 
    47  001E                     	;# 
    48  001F                     	;# 
    49  0081                     	;# 
    50  0085                     	;# 
    51  0086                     	;# 
    52  008C                     	;# 
    53  008D                     	;# 
    54  008E                     	;# 
    55  008F                     	;# 
    56  0090                     	;# 
    57  0092                     	;# 
    58  0093                     	;# 
    59  0094                     	;# 
    60  009E                     	;# 
    61  009F                     	;# 
    62  010C                     	;# 
    63  010D                     	;# 
    64  010E                     	;# 
    65  010F                     	;# 
    66  018C                     	;# 
    67  018D                     	;# 
    68  0000                     	;# 
    69  0001                     	;# 
    70  0002                     	;# 
    71  0003                     	;# 
    72  0004                     	;# 
    73  0005                     	;# 
    74  0006                     	;# 
    75  000A                     	;# 
    76  000B                     	;# 
    77  000C                     	;# 
    78  000D                     	;# 
    79  000E                     	;# 
    80  000E                     	;# 
    81  000F                     	;# 
    82  0010                     	;# 
    83  0011                     	;# 
    84  0012                     	;# 
    85  0013                     	;# 
    86  0014                     	;# 
    87  0015                     	;# 
    88  0015                     	;# 
    89  0016                     	;# 
    90  0017                     	;# 
    91  001E                     	;# 
    92  001F                     	;# 
    93  0081                     	;# 
    94  0085                     	;# 
    95  0086                     	;# 
    96  008C                     	;# 
    97  008D                     	;# 
    98  008E                     	;# 
    99  008F                     	;# 
   100  0090                     	;# 
   101  0092                     	;# 
   102  0093                     	;# 
   103  0094                     	;# 
   104  009E                     	;# 
   105  009F                     	;# 
   106  010C                     	;# 
   107  010D                     	;# 
   108  010E                     	;# 
   109  010F                     	;# 
   110  018C                     	;# 
   111  018D                     	;# 
   112  0000                     	;# 
   113  0001                     	;# 
   114  0002                     	;# 
   115  0003                     	;# 
   116  0004                     	;# 
   117  0005                     	;# 
   118  0006                     	;# 
   119  000A                     	;# 
   120  000B                     	;# 
   121  000C                     	;# 
   122  000D                     	;# 
   123  000E                     	;# 
   124  000E                     	;# 
   125  000F                     	;# 
   126  0010                     	;# 
   127  0011                     	;# 
   128  0012                     	;# 
   129  0013                     	;# 
   130  0014                     	;# 
   131  0015                     	;# 
   132  0015                     	;# 
   133  0016                     	;# 
   134  0017                     	;# 
   135  001E                     	;# 
   136  001F                     	;# 
   137  0081                     	;# 
   138  0085                     	;# 
   139  0086                     	;# 
   140  008C                     	;# 
   141  008D                     	;# 
   142  008E                     	;# 
   143  008F                     	;# 
   144  0090                     	;# 
   145  0092                     	;# 
   146  0093                     	;# 
   147  0094                     	;# 
   148  009E                     	;# 
   149  009F                     	;# 
   150  010C                     	;# 
   151  010D                     	;# 
   152  010E                     	;# 
   153  010F                     	;# 
   154  018C                     	;# 
   155  018D                     	;# 
   156                           
   157                           	psect	idataCOMMON
   158  025E                     __pidataCOMMON:	
   159                           
   160                           ;initializer for _t_milisegundos
   161  025E  34E8               	retlw	232
   162  025F  3403               	retlw	3
   163                           
   164                           ;initializer for verteclas@old_teclas
   165  0260  341F               	retlw	31
   166  000E                     _TMR1	set	14
   167  0005                     _PORTA	set	5
   168  005F                     _GIE	set	95
   169  005E                     _PEIE	set	94
   170  0028                     _RA0	set	40
   171  0029                     _RA1	set	41
   172  002A                     _RA2	set	42
   173  002B                     _RA3	set	43
   174  002D                     _RA5	set	45
   175  0030                     _RB0	set	48
   176  0037                     _RB7	set	55
   177  0060                     _TMR1IF	set	96
   178  0080                     _TMR1ON	set	128
   179  009F                     _ADCON1	set	159
   180  0085                     _TRISA	set	133
   181  0460                     _TMR1IE	set	1120
   182                           
   183                           	psect	cinit
   184  0011                     start_initialization:	
   185                           ; #config settings
   186                           
   187  0011                     __initialization:	
   188                           
   189                           ; Clear objects allocated to COMMON
   190  0011  3040               	movlw	low __pbssCOMMON
   191  0012  0084               	movwf	4
   192  0013  305B               	movlw	low (__pbssCOMMON+27)
   193  0014  224C               	fcall	clear_ram0
   194                           
   195                           ; Initialize objects allocated to COMMON
   196  0015  225E               	fcall	__pidataCOMMON	;fetch initializer
   197  0016  00E6               	movwf	__pdataCOMMON& (0+127)
   198  0017  225F               	fcall	__pidataCOMMON+1	;fetch initializer
   199  0018  00E7               	movwf	(__pdataCOMMON+1)& (0+127)
   200  0019  2260               	fcall	__pidataCOMMON+2	;fetch initializer
   201  001A  00E8               	movwf	(__pdataCOMMON+2)& (0+127)
   202  001B                     end_of_initialization:	
   203                           ;End of C runtime variable initialization code
   204                           
   205  001B                     __end_of__initialization:	
   206  001B  0183               	clrf	3
   207  001C  28B7               	ljmp	_main	;jump to C main() function
   208                           
   209                           	psect	bssCOMMON
   210  0040                     __pbssCOMMON:	
   211  0040                     _t_btnpress:	
   212  0040                     	ds	2
   213  0042                     _t_resistencias:	
   214  0042                     	ds	2
   215  0044                     _temperatura:	
   216  0044                     	ds	2
   217  0046                     _termocupla:	
   218  0046                     	ds	2
   219  0048                     _tiempo:	
   220  0048                     	ds	2
   221  004A                     _aux:	
   222  004A                     	ds	1
   223  004B                     _bloq_entradas:	
   224  004B                     	ds	1
   225  004C                     _digTe0:	
   226  004C                     	ds	1
   227  004D                     _digTe1:	
   228  004D                     	ds	1
   229  004E                     _digTe2:	
   230  004E                     	ds	1
   231  004F                     _digTi0:	
   232  004F                     	ds	1
   233  0050                     _digTi1:	
   234  0050                     	ds	1
   235  0051                     _entradas:	
   236  0051                     	ds	1
   237  0052                     _myflags:	
   238  0052                     	ds	1
   239  0053                     _t_apagado:	
   240  0053                     	ds	1
   241  0054                     _t_inputs:	
   242  0054                     	ds	1
   243  0055                     _tempd0:	
   244  0055                     	ds	1
   245  0056                     _tempd1:	
   246  0056                     	ds	1
   247  0057                     _tempd2:	
   248  0057                     	ds	1
   249  0058                     _timed0:	
   250  0058                     	ds	1
   251  0059                     _timed1:	
   252  0059                     	ds	1
   253  005A                     timer1@numDisplay:	
   254  005A                     	ds	1
   255                           
   256                           	psect	dataCOMMON
   257  0066                     __pdataCOMMON:	
   258  0066                     _t_milisegundos:	
   259  0066                     	ds	2
   260  0068                     verteclas@old_teclas:	
   261  0068                     	ds	1
   262                           
   263                           	psect	clrtext
   264  024C                     clear_ram0:	
   265                           ;	Called with FSR containing the base address, and
   266                           ;	W with the last address+1
   267                           
   268  024C  0064               	clrwdt	;clear the watchdog before getting into this loop
   269  024D                     clrloop0:	
   270  024D  0180               	clrf	0	;clear RAM location pointed to by FSR
   271  024E  0A84               	incf	4,f	;increment pointer
   272  024F  0604               	xorwf	4,w	;XOR with final address
   273  0250  1903               	btfsc	3,2	;have we reached the end yet?
   274  0251  3400               	retlw	0	;all done for this memory range, return
   275  0252  0604               	xorwf	4,w	;XOR again to restore value
   276  0253  2A4D               	goto	clrloop0	;do the next byte
   277                           
   278                           	psect	cstackCOMMON
   279  005B                     __pcstackCOMMON:	
   280  005B                     ?_delay_100us:	
   281  005B                     ?_encender:	
   282                           ; 0 bytes @ 0x0
   283                           
   284  005B                     ?_apagar:	
   285                           ; 0 bytes @ 0x0
   286                           
   287  005B                     ?_controltemp:	
   288                           ; 0 bytes @ 0x0
   289                           
   290  005B                     ?_convertirTemp:	
   291                           ; 0 bytes @ 0x0
   292                           
   293  005B                     ?_convertirTiempo:	
   294                           ; 0 bytes @ 0x0
   295                           
   296  005B                     ?_verteclas:	
   297                           ; 0 bytes @ 0x0
   298                           
   299  005B                     ?_main:	
   300                           ; 0 bytes @ 0x0
   301                           
   302  005B                     ?_toggleLatch:	
   303                           ; 0 bytes @ 0x0
   304                           
   305  005B                     ??_toggleLatch:	
   306                           ; 0 bytes @ 0x0
   307                           
   308  005B                     ?_timer1:	
   309                           ; 0 bytes @ 0x0
   310                           
   311  005B                     ??_timer1:	
   312                           ; 0 bytes @ 0x0
   313                           
   314  005B                     ?_isr:	
   315                           ; 0 bytes @ 0x0
   316                           
   317                           
   318                           ; 0 bytes @ 0x0
   319  005B                     	ds	2
   320  005D                     ??_isr:	
   321                           
   322                           ; 0 bytes @ 0x2
   323  005D                     	ds	4
   324  0061                     ??_delay_100us:	
   325  0061                     ??_encender:	
   326                           ; 0 bytes @ 0x6
   327                           
   328  0061                     ??_apagar:	
   329                           ; 0 bytes @ 0x6
   330                           
   331  0061                     ??_controltemp:	
   332                           ; 0 bytes @ 0x6
   333                           
   334  0061                     ??_convertirTemp:	
   335                           ; 0 bytes @ 0x6
   336                           
   337  0061                     ??_convertirTiempo:	
   338                           ; 0 bytes @ 0x6
   339                           
   340  0061                     ??_verteclas:	
   341                           ; 0 bytes @ 0x6
   342                           
   343                           
   344                           ; 0 bytes @ 0x6
   345  0061                     	ds	1
   346  0062                     verteclas@trisabk:	
   347  0062                     convertirTemp@tempbk:	
   348                           ; 1 bytes @ 0x7
   349                           
   350  0062                     convertirTiempo@tiempobk:	
   351                           ; 2 bytes @ 0x7
   352                           
   353                           
   354                           ; 2 bytes @ 0x7
   355  0062                     	ds	1
   356  0063                     verteclas@puertoabk:	
   357                           
   358                           ; 1 bytes @ 0x8
   359  0063                     	ds	1
   360  0064                     ??_main:	
   361                           
   362                           ; 0 bytes @ 0x9
   363  0064                     	ds	1
   364  0065                     main@banderas:	
   365                           
   366                           ; 1 bytes @ 0xA
   367  0065                     	ds	1
   368                           
   369                           	psect	maintext
   370  00B7                     __pmaintext:	
   371 ;;
   372 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   373 ;;
   374 ;; *************** function _main *****************
   375 ;; Defined at:
   376 ;;		line 200 in file "main.c"
   377 ;; Parameters:    Size  Location     Type
   378 ;;		None
   379 ;; Auto vars:     Size  Location     Type
   380 ;;  banderas        1   10[COMMON] struct .
   381 ;; Return value:  Size  Location     Type
   382 ;;		None               void
   383 ;; Registers used:
   384 ;;		wreg, status,2, status,0, pclath, cstack
   385 ;; Tracked objects:
   386 ;;		On entry : 17F/0
   387 ;;		On exit  : 0/0
   388 ;;		Unchanged: 0/0
   389 ;; Data sizes:     COMMON   BANK0   BANK1
   390 ;;      Params:         0       0       0
   391 ;;      Locals:         1       0       0
   392 ;;      Temps:          1       0       0
   393 ;;      Totals:         2       0       0
   394 ;;Total ram usage:        2 bytes
   395 ;; Hardware stack levels required when called:    5
   396 ;; This function calls:
   397 ;;		_apagar
   398 ;;		_controltemp
   399 ;;		_convertirTemp
   400 ;;		_convertirTiempo
   401 ;;		_encender
   402 ;;		_verteclas
   403 ;; This function is called by:
   404 ;;		Startup code after reset
   405 ;; This function uses a non-reentrant model
   406 ;;
   407                           
   408                           
   409                           ;psect for function _main
   410  00B7                     _main:	
   411                           
   412                           ;main.c: 202: Flags banderas;
   413                           ;main.c: 209: TMR1 = 65535 - 2000;
   414                           
   415                           ;incstack = 0
   416                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   417  00B7  30F8               	movlw	248
   418  00B8  1283               	bcf	3,5	;RP0=0, select bank0
   419  00B9  1303               	bcf	3,6	;RP1=0, select bank0
   420  00BA  008F               	movwf	15	;volatile
   421  00BB  302F               	movlw	47
   422  00BC  008E               	movwf	14	;volatile
   423                           
   424                           ;main.c: 210: TMR1ON = 1;
   425  00BD  1410               	bsf	16,0	;volatile
   426                           
   427                           ;main.c: 211: TMR1IE = 1;
   428  00BE  1683               	bsf	3,5	;RP0=1, select bank1
   429  00BF  1303               	bcf	3,6	;RP1=0, select bank1
   430  00C0  140C               	bsf	12,0	;volatile
   431                           
   432                           ;main.c: 212: PEIE = 1;
   433  00C1  170B               	bsf	11,6	;volatile
   434                           
   435                           ;main.c: 213: GIE = 1;
   436  00C2  178B               	bsf	11,7	;volatile
   437                           
   438                           ;main.c: 214: ADCON1 = 0x6;
   439  00C3  3006               	movlw	6
   440  00C4  009F               	movwf	31	;volatile
   441  00C5                     l118:	
   442                           ;main.c: 215: while (1){
   443                           
   444  00C5  0064               	clrwdt	;# 
   445                           
   446                           ;main.c: 217: controltemp();
   447  00C6  2220               	fcall	_controltemp
   448                           
   449                           ;main.c: 218: if(!t_inputs){
   450  00C7  08D4               	movf	_t_inputs,f
   451  00C8  1D03               	skipz
   452  00C9  28C5               	goto	l118
   453                           
   454                           ;main.c: 219: t_inputs = 10;
   455  00CA  300A               	movlw	10
   456  00CB  00E4               	movwf	??_main
   457  00CC  0864               	movf	??_main,w
   458  00CD  00D4               	movwf	_t_inputs
   459                           
   460                           ;main.c: 220: verteclas();
   461  00CE  2191               	fcall	_verteclas
   462                           
   463                           ;main.c: 221: if(bloq_entradas != 0x1F){
   464  00CF  084B               	movf	_bloq_entradas,w
   465  00D0  3A1F               	xorlw	31
   466  00D1  1903               	skipnz
   467  00D2  28C5               	goto	l118
   468                           
   469                           ;main.c: 224: if(t_btnpress==0){
   470  00D3  0841               	movf	_t_btnpress+1,w
   471  00D4  0440               	iorwf	_t_btnpress,w
   472  00D5  1D03               	skipz
   473  00D6  28DB               	goto	l870
   474                           
   475                           ;main.c: 225: t_btnpress = 200;
   476  00D7  30C8               	movlw	200
   477  00D8  00C0               	movwf	_t_btnpress
   478  00D9  3000               	movlw	0
   479  00DA  00C1               	movwf	_t_btnpress+1
   480  00DB                     l870:	
   481                           
   482                           ;main.c: 226: }
   483                           ;main.c: 227: if(!((bloq_entradas) & (1 <<(swStartStop)))){
   484  00DB  1E4B               	btfss	_bloq_entradas,4
   485                           
   486                           ;main.c: 230: if(!((entradas) & (1 <<(swStartStop)))){
   487  00DC  1A51               	btfsc	_entradas,4
   488  00DD  28E4               	goto	l882
   489                           
   490                           ;main.c: 232: if(banderas.b0){
   491  00DE  1C65               	btfss	main@banderas,0
   492  00DF  28E2               	goto	l878
   493                           
   494                           ;main.c: 233: apagar();
   495  00E0  2263               	fcall	_apagar
   496                           
   497                           ;main.c: 234: }
   498  00E1  28E3               	goto	l880
   499  00E2                     l878:	
   500                           
   501                           ;main.c: 235: else{
   502                           ;main.c: 236: encender();
   503  00E2  2261               	fcall	_encender
   504  00E3                     l880:	
   505                           
   506                           ;main.c: 237: }
   507                           ;main.c: 239: ((bloq_entradas) |= (1 << (swStartStop)));
   508  00E3  164B               	bsf	_bloq_entradas,4
   509  00E4                     l882:	
   510                           
   511                           ;main.c: 240: }
   512                           ;main.c: 241: }
   513                           ;main.c: 243: if(!((bloq_entradas) & (1 <<(swTempMas)))){
   514  00E4  1CCB               	btfss	_bloq_entradas,1
   515                           
   516                           ;main.c: 246: if(!((entradas) & (1 <<(swTempMas)))){
   517  00E5  18D1               	btfsc	_entradas,1
   518  00E6  28F6               	goto	l894
   519                           
   520                           ;main.c: 248: temperatura++;
   521  00E7  3001               	movlw	1
   522  00E8  07C4               	addwf	_temperatura,f
   523  00E9  1803               	skipnc
   524  00EA  0AC5               	incf	_temperatura+1,f
   525  00EB  3000               	movlw	0
   526  00EC  07C5               	addwf	_temperatura+1,f
   527                           
   528                           ;main.c: 249: if(temperatura==210+1){
   529  00ED  30D3               	movlw	211
   530  00EE  0644               	xorwf	_temperatura,w
   531  00EF  0445               	iorwf	_temperatura+1,w
   532  00F0  1D03               	skipz
   533  00F1  28F4               	goto	l890
   534                           
   535                           ;main.c: 250: temperatura = 0;
   536  00F2  01C4               	clrf	_temperatura
   537  00F3  01C5               	clrf	_temperatura+1
   538  00F4                     l890:	
   539                           
   540                           ;main.c: 251: }
   541                           ;main.c: 252: convertirTemp();
   542  00F4  21E5               	fcall	_convertirTemp
   543                           
   544                           ;main.c: 254: ((bloq_entradas) |= (1 << (swTempMas)));
   545  00F5  14CB               	bsf	_bloq_entradas,1
   546  00F6                     l894:	
   547                           
   548                           ;main.c: 255: }
   549                           ;main.c: 256: }
   550                           ;main.c: 257: if(!((bloq_entradas) & (1 <<(swTempMenos)))){
   551  00F6  1C4B               	btfss	_bloq_entradas,0
   552                           
   553                           ;main.c: 260: if(!((entradas) & (1 <<(swTempMenos)))){
   554  00F7  1851               	btfsc	_entradas,0
   555  00F8  290A               	goto	l908
   556                           
   557                           ;main.c: 262: if(temperatura){
   558  00F9  0845               	movf	_temperatura+1,w
   559  00FA  0444               	iorwf	_temperatura,w
   560  00FB  1903               	skipnz
   561  00FC  2904               	goto	l902
   562                           
   563                           ;main.c: 263: temperatura--;
   564  00FD  3001               	movlw	1
   565  00FE  02C4               	subwf	_temperatura,f
   566  00FF  3000               	movlw	0
   567  0100  1C03               	skipc
   568  0101  03C5               	decf	_temperatura+1,f
   569  0102  02C5               	subwf	_temperatura+1,f
   570                           
   571                           ;main.c: 264: }
   572  0103  2908               	goto	l904
   573  0104                     l902:	
   574                           
   575                           ;main.c: 265: else{
   576                           ;main.c: 266: temperatura = 210;
   577  0104  30D2               	movlw	210
   578  0105  00C4               	movwf	_temperatura
   579  0106  3000               	movlw	0
   580  0107  00C5               	movwf	_temperatura+1
   581  0108                     l904:	
   582                           
   583                           ;main.c: 267: }
   584                           ;main.c: 268: convertirTemp();
   585  0108  21E5               	fcall	_convertirTemp
   586                           
   587                           ;main.c: 270: ((bloq_entradas) |= (1 << (swTempMenos)));
   588  0109  144B               	bsf	_bloq_entradas,0
   589  010A                     l908:	
   590                           
   591                           ;main.c: 271: }
   592                           ;main.c: 272: }
   593                           ;main.c: 273: if(!((bloq_entradas) & (1 <<(swTiempoMas)))){
   594  010A  1DCB               	btfss	_bloq_entradas,3
   595                           
   596                           ;main.c: 276: if(!((entradas) & (1 <<(swTiempoMas)))){
   597  010B  19D1               	btfsc	_entradas,3
   598  010C  291F               	goto	l920
   599                           
   600                           ;main.c: 278: tiempo++;
   601  010D  3001               	movlw	1
   602  010E  07C8               	addwf	_tiempo,f
   603  010F  1803               	skipnc
   604  0110  0AC9               	incf	_tiempo+1,f
   605  0111  3000               	movlw	0
   606  0112  07C9               	addwf	_tiempo+1,f
   607                           
   608                           ;main.c: 279: if (tiempo==9*60-1){
   609  0113  3002               	movlw	2
   610  0114  0649               	xorwf	_tiempo+1,w
   611  0115  1D03               	skipz
   612  0116  2919               	goto	u375
   613  0117  301B               	movlw	27
   614  0118  0648               	xorwf	_tiempo,w
   615  0119                     u375:	
   616  0119  1D03               	skipz
   617  011A  291D               	goto	l916
   618                           
   619                           ;main.c: 280: tiempo = 0;
   620  011B  01C8               	clrf	_tiempo
   621  011C  01C9               	clrf	_tiempo+1
   622  011D                     l916:	
   623                           
   624                           ;main.c: 281: }
   625                           ;main.c: 282: convertirTiempo();
   626  011D  2134               	fcall	_convertirTiempo
   627                           
   628                           ;main.c: 284: ((bloq_entradas) |= (1 << (swTiempoMas)));
   629  011E  15CB               	bsf	_bloq_entradas,3
   630  011F                     l920:	
   631                           
   632                           ;main.c: 285: }
   633                           ;main.c: 286: }
   634                           ;main.c: 287: if(!((bloq_entradas) & (1 <<(swTiempoMenos)))){
   635  011F  1D4B               	btfss	_bloq_entradas,2
   636                           
   637                           ;main.c: 290: if(!((entradas) & (1 <<(swTiempoMenos)))){
   638  0120  1951               	btfsc	_entradas,2
   639  0121  28C5               	goto	l118
   640                           
   641                           ;main.c: 292: if(tiempo){
   642  0122  0849               	movf	_tiempo+1,w
   643  0123  0448               	iorwf	_tiempo,w
   644  0124  1903               	skipnz
   645  0125  292D               	goto	l928
   646                           
   647                           ;main.c: 293: tiempo--;
   648  0126  3001               	movlw	1
   649  0127  02C8               	subwf	_tiempo,f
   650  0128  3000               	movlw	0
   651  0129  1C03               	skipc
   652  012A  03C9               	decf	_tiempo+1,f
   653  012B  02C9               	subwf	_tiempo+1,f
   654                           
   655                           ;main.c: 294: }
   656  012C  2931               	goto	l930
   657  012D                     l928:	
   658                           
   659                           ;main.c: 295: else{
   660                           ;main.c: 296: tiempo = 9*60-1;
   661  012D  301B               	movlw	27
   662  012E  00C8               	movwf	_tiempo
   663  012F  3002               	movlw	2
   664  0130  00C9               	movwf	_tiempo+1
   665  0131                     l930:	
   666                           
   667                           ;main.c: 297: }
   668                           ;main.c: 298: convertirTiempo();
   669  0131  2134               	fcall	_convertirTiempo
   670                           
   671                           ;main.c: 300: ((bloq_entradas) |= (1 << (swTiempoMenos)));
   672  0132  154B               	bsf	_bloq_entradas,2
   673  0133  28C5               	goto	l118
   674  0134                     __end_of_main:	
   675                           
   676                           	psect	text1
   677  0191                     __ptext1:	
   678 ;; *************** function _verteclas *****************
   679 ;; Defined at:
   680 ;;		line 136 in file "main.c"
   681 ;; Parameters:    Size  Location     Type
   682 ;;		None
   683 ;; Auto vars:     Size  Location     Type
   684 ;;  puertoabk       1    8[COMMON] unsigned char 
   685 ;;  trisabk         1    7[COMMON] unsigned char 
   686 ;; Return value:  Size  Location     Type
   687 ;;		None               void
   688 ;; Registers used:
   689 ;;		wreg, status,2, status,0, pclath, cstack
   690 ;; Tracked objects:
   691 ;;		On entry : 0/0
   692 ;;		On exit  : 0/0
   693 ;;		Unchanged: 0/0
   694 ;; Data sizes:     COMMON   BANK0   BANK1
   695 ;;      Params:         0       0       0
   696 ;;      Locals:         2       0       0
   697 ;;      Temps:          1       0       0
   698 ;;      Totals:         3       0       0
   699 ;;Total ram usage:        3 bytes
   700 ;; Hardware stack levels used:    1
   701 ;; Hardware stack levels required when called:    4
   702 ;; This function calls:
   703 ;;		_delay_100us
   704 ;; This function is called by:
   705 ;;		_main
   706 ;; This function uses a non-reentrant model
   707 ;;
   708                           
   709                           
   710                           ;psect for function _verteclas
   711  0191                     _verteclas:	
   712                           
   713                           ;main.c: 138: static Registro old_teclas = 0x01F;
   714                           ;main.c: 139: uint8_t trisabk,puertoabk;
   715                           ;main.c: 141: trisabk = TRISA;
   716                           
   717                           ;incstack = 0
   718                           ; Regs used in _verteclas: [wreg+status,2+status,0+pclath+cstack]
   719  0191  1683               	bsf	3,5	;RP0=1, select bank1
   720  0192  1303               	bcf	3,6	;RP1=0, select bank1
   721  0193  0805               	movf	5,w	;volatile
   722  0194  00E1               	movwf	??_verteclas
   723  0195  0861               	movf	??_verteclas,w
   724  0196  00E2               	movwf	verteclas@trisabk
   725                           
   726                           ;main.c: 142: puertoabk = PORTA;
   727  0197  1283               	bcf	3,5	;RP0=0, select bank0
   728  0198  1303               	bcf	3,6	;RP1=0, select bank0
   729  0199  0805               	movf	5,w	;volatile
   730  019A  00E1               	movwf	??_verteclas
   731  019B  0861               	movf	??_verteclas,w
   732  019C  00E3               	movwf	verteclas@puertoabk
   733                           
   734                           ;main.c: 144: TRISA = TRISA | 0x1F;
   735  019D  1683               	bsf	3,5	;RP0=1, select bank1
   736  019E  1303               	bcf	3,6	;RP1=0, select bank1
   737  019F  0805               	movf	5,w	;volatile
   738  01A0  381F               	iorlw	31
   739  01A1  0085               	movwf	5	;volatile
   740                           
   741                           ;main.c: 146: delay_100us();
   742  01A2  2254               	fcall	_delay_100us
   743                           
   744                           ;main.c: 147: if(old_teclas.value == (PORTA & 0x1F) ){
   745  01A3  1283               	bcf	3,5	;RP0=0, select bank0
   746  01A4  1303               	bcf	3,6	;RP1=0, select bank0
   747  01A5  0805               	movf	5,w	;volatile
   748  01A6  391F               	andlw	31
   749  01A7  0668               	xorwf	verteclas@old_teclas,w
   750  01A8  1D03               	skipz
   751  01A9  29AF               	goto	l746
   752                           
   753                           ;main.c: 148: entradas = old_teclas.value;
   754  01AA  0868               	movf	verteclas@old_teclas,w
   755  01AB  00E1               	movwf	??_verteclas
   756  01AC  0861               	movf	??_verteclas,w
   757  01AD  00D1               	movwf	_entradas
   758                           
   759                           ;main.c: 149: }
   760  01AE  29B8               	goto	l750
   761  01AF                     l746:	
   762                           
   763                           ;main.c: 150: else{
   764                           ;main.c: 151: old_teclas.value = (PORTA & 0x1F);
   765  01AF  0805               	movf	5,w	;volatile
   766  01B0  391F               	andlw	31
   767  01B1  00E1               	movwf	??_verteclas
   768  01B2  0861               	movf	??_verteclas,w
   769  01B3  00E8               	movwf	verteclas@old_teclas
   770                           
   771                           ;main.c: 153: t_btnpress = 500;
   772  01B4  30F4               	movlw	244
   773  01B5  00C0               	movwf	_t_btnpress
   774  01B6  3001               	movlw	1
   775  01B7  00C1               	movwf	_t_btnpress+1
   776  01B8                     l750:	
   777                           
   778                           ;main.c: 155: }
   779                           ;main.c: 157: if (((entradas) & (1 <<(swStartStop)))){
   780  01B8  1E51               	btfss	_entradas,4
   781  01B9  29BE               	goto	l754
   782                           
   783                           ;main.c: 160: ((bloq_entradas) &= ~(1 << (swStartStop)));
   784  01BA  30EF               	movlw	239
   785  01BB  00E1               	movwf	??_verteclas
   786  01BC  0861               	movf	??_verteclas,w
   787  01BD  05CB               	andwf	_bloq_entradas,f
   788  01BE                     l754:	
   789                           
   790                           ;main.c: 161: }
   791                           ;main.c: 162: if (t_btnpress==0){
   792  01BE  0841               	movf	_t_btnpress+1,w
   793  01BF  0440               	iorwf	_t_btnpress,w
   794  01C0  1D03               	skipz
   795  01C1  29C4               	goto	l106
   796                           
   797                           ;main.c: 163: bloq_entradas = bloq_entradas & !(swTiempoMas|swTiempoMenos|swTempMas|swTe
      +                          mpMenos);
   798  01C2  01CB               	clrf	_bloq_entradas
   799                           
   800                           ;main.c: 165: }
   801  01C3  29DC               	goto	l772
   802  01C4                     l106:	
   803                           
   804                           ;main.c: 166: else{
   805                           ;main.c: 167: if (((entradas) & (1 <<(swTiempoMas)))){
   806  01C4  1DD1               	btfss	_entradas,3
   807  01C5  29CA               	goto	l760
   808                           
   809                           ;main.c: 169: ((bloq_entradas) &= ~(1 << (swTiempoMas)));
   810  01C6  30F7               	movlw	247
   811  01C7  00E1               	movwf	??_verteclas
   812  01C8  0861               	movf	??_verteclas,w
   813  01C9  05CB               	andwf	_bloq_entradas,f
   814  01CA                     l760:	
   815                           
   816                           ;main.c: 170: }
   817                           ;main.c: 171: if (((entradas) & (1 <<(swTiempoMenos)))){
   818  01CA  1D51               	btfss	_entradas,2
   819  01CB  29D0               	goto	l764
   820                           
   821                           ;main.c: 173: ((bloq_entradas) &= ~(1 << (swTiempoMenos)));
   822  01CC  30FB               	movlw	251
   823  01CD  00E1               	movwf	??_verteclas
   824  01CE  0861               	movf	??_verteclas,w
   825  01CF  05CB               	andwf	_bloq_entradas,f
   826  01D0                     l764:	
   827                           
   828                           ;main.c: 174: }
   829                           ;main.c: 175: if (((entradas) & (1 <<(swTempMas)))){
   830  01D0  1CD1               	btfss	_entradas,1
   831  01D1  29D6               	goto	l768
   832                           
   833                           ;main.c: 177: ((bloq_entradas) &= ~(1 << (swTempMas)));
   834  01D2  30FD               	movlw	253
   835  01D3  00E1               	movwf	??_verteclas
   836  01D4  0861               	movf	??_verteclas,w
   837  01D5  05CB               	andwf	_bloq_entradas,f
   838  01D6                     l768:	
   839                           
   840                           ;main.c: 178: }
   841                           ;main.c: 179: if (((entradas) & (1 <<(swTempMenos)))){
   842  01D6  1C51               	btfss	_entradas,0
   843  01D7  29DC               	goto	l772
   844                           
   845                           ;main.c: 181: ((bloq_entradas) &= ~(1 << (swTempMenos)));
   846  01D8  30FE               	movlw	254
   847  01D9  00E1               	movwf	??_verteclas
   848  01DA  0861               	movf	??_verteclas,w
   849  01DB  05CB               	andwf	_bloq_entradas,f
   850  01DC                     l772:	
   851                           
   852                           ;main.c: 182: }
   853                           ;main.c: 183: }
   854                           ;main.c: 186: TRISA = trisabk;
   855  01DC  0862               	movf	verteclas@trisabk,w
   856  01DD  1683               	bsf	3,5	;RP0=1, select bank1
   857  01DE  1303               	bcf	3,6	;RP1=0, select bank1
   858  01DF  0085               	movwf	5	;volatile
   859                           
   860                           ;main.c: 187: PORTA = puertoabk;
   861  01E0  0863               	movf	verteclas@puertoabk,w
   862  01E1  1283               	bcf	3,5	;RP0=0, select bank0
   863  01E2  1303               	bcf	3,6	;RP1=0, select bank0
   864  01E3  0085               	movwf	5	;volatile
   865  01E4  0008               	return
   866  01E5                     __end_of_verteclas:	
   867                           
   868                           	psect	text2
   869  0254                     __ptext2:	
   870 ;; *************** function _delay_100us *****************
   871 ;; Defined at:
   872 ;;		line 190 in file "main.c"
   873 ;; Parameters:    Size  Location     Type
   874 ;;		None
   875 ;; Auto vars:     Size  Location     Type
   876 ;;		None
   877 ;; Return value:  Size  Location     Type
   878 ;;		None               void
   879 ;; Registers used:
   880 ;;		None
   881 ;; Tracked objects:
   882 ;;		On entry : 0/0
   883 ;;		On exit  : 0/0
   884 ;;		Unchanged: 0/0
   885 ;; Data sizes:     COMMON   BANK0   BANK1
   886 ;;      Params:         0       0       0
   887 ;;      Locals:         0       0       0
   888 ;;      Temps:          0       0       0
   889 ;;      Totals:         0       0       0
   890 ;;Total ram usage:        0 bytes
   891 ;; Hardware stack levels used:    1
   892 ;; Hardware stack levels required when called:    3
   893 ;; This function calls:
   894 ;;		Nothing
   895 ;; This function is called by:
   896 ;;		_verteclas
   897 ;; This function uses a non-reentrant model
   898 ;;
   899                           
   900                           
   901                           ;psect for function _delay_100us
   902  0254                     _delay_100us:	
   903                           
   904                           ;incstack = 0
   905                           ; Regs used in _delay_100us: []
   906  0254  3021               	movlw	33	; ;# 
   907  0255  00CA               	movwf	_aux	; ;# 
   908  0256                     _decremento:	
   909                           
   910                           ;# 
   911  0256  0BCA               	decfsz	_aux,f	; ;# 
   912  0257  2A56               	goto	_decremento	;# 
   913  0258  0008               	return
   914  0259                     __end_of_delay_100us:	
   915                           
   916                           	psect	text3
   917  0261                     __ptext3:	
   918 ;; *************** function _encender *****************
   919 ;; Defined at:
   920 ;;		line 66 in file "main.c"
   921 ;; Parameters:    Size  Location     Type
   922 ;;		None
   923 ;; Auto vars:     Size  Location     Type
   924 ;;		None
   925 ;; Return value:  Size  Location     Type
   926 ;;		None               void
   927 ;; Registers used:
   928 ;;		None
   929 ;; Tracked objects:
   930 ;;		On entry : 0/0
   931 ;;		On exit  : 0/0
   932 ;;		Unchanged: 0/0
   933 ;; Data sizes:     COMMON   BANK0   BANK1
   934 ;;      Params:         0       0       0
   935 ;;      Locals:         0       0       0
   936 ;;      Temps:          0       0       0
   937 ;;      Totals:         0       0       0
   938 ;;Total ram usage:        0 bytes
   939 ;; Hardware stack levels used:    1
   940 ;; Hardware stack levels required when called:    3
   941 ;; This function calls:
   942 ;;		Nothing
   943 ;; This function is called by:
   944 ;;		_main
   945 ;; This function uses a non-reentrant model
   946 ;;
   947                           
   948                           
   949                           ;psect for function _encender
   950  0261                     _encender:	
   951                           
   952                           ;main.c: 67: myflags.b0 = 1;
   953                           
   954                           ;incstack = 0
   955                           ; Regs used in _encender: []
   956  0261  1452               	bsf	_myflags,0
   957  0262  0008               	return
   958  0263                     __end_of_encender:	
   959                           
   960                           	psect	text4
   961  0134                     __ptext4:	
   962 ;; *************** function _convertirTiempo *****************
   963 ;; Defined at:
   964 ;;		line 106 in file "main.c"
   965 ;; Parameters:    Size  Location     Type
   966 ;;		None
   967 ;; Auto vars:     Size  Location     Type
   968 ;;  tiempobk        2    7[COMMON] unsigned int 
   969 ;; Return value:  Size  Location     Type
   970 ;;		None               void
   971 ;; Registers used:
   972 ;;		wreg, status,2, status,0
   973 ;; Tracked objects:
   974 ;;		On entry : 0/0
   975 ;;		On exit  : 0/0
   976 ;;		Unchanged: 0/0
   977 ;; Data sizes:     COMMON   BANK0   BANK1
   978 ;;      Params:         0       0       0
   979 ;;      Locals:         2       0       0
   980 ;;      Temps:          1       0       0
   981 ;;      Totals:         3       0       0
   982 ;;Total ram usage:        3 bytes
   983 ;; Hardware stack levels used:    1
   984 ;; Hardware stack levels required when called:    3
   985 ;; This function calls:
   986 ;;		Nothing
   987 ;; This function is called by:
   988 ;;		_main
   989 ;; This function uses a non-reentrant model
   990 ;;
   991                           
   992                           
   993                           ;psect for function _convertirTiempo
   994  0134                     _convertirTiempo:	
   995                           
   996                           ;main.c: 108: uint16_t tiempobk;
   997                           ;main.c: 109: tiempobk = tiempo;
   998                           
   999                           ;incstack = 0
  1000                           ; Regs used in _convertirTiempo: [wreg+status,2+status,0]
  1001  0134  0849               	movf	_tiempo+1,w
  1002  0135  01E3               	clrf	convertirTiempo@tiempobk+1
  1003  0136  07E3               	addwf	convertirTiempo@tiempobk+1,f
  1004  0137  0848               	movf	_tiempo,w
  1005  0138  01E2               	clrf	convertirTiempo@tiempobk
  1006  0139  07E2               	addwf	convertirTiempo@tiempobk,f
  1007                           
  1008                           ;main.c: 110: TMR1IE = 0;
  1009  013A  1683               	bsf	3,5	;RP0=1, select bank1
  1010  013B  1303               	bcf	3,6	;RP1=0, select bank1
  1011  013C  100C               	bcf	12,0	;volatile
  1012                           
  1013                           ;main.c: 111: digTi1 = 0;
  1014  013D  01D0               	clrf	_digTi1
  1015                           
  1016                           ;main.c: 112: if (tiempo < 60){
  1017  013E  3000               	movlw	0
  1018  013F  0249               	subwf	_tiempo+1,w
  1019  0140  303C               	movlw	60
  1020  0141  1903               	skipnz
  1021  0142  0248               	subwf	_tiempo,w
  1022  0143  1803               	skipnc
  1023  0144  2961               	goto	l87
  1024                           
  1025                           ;main.c: 113: RB7 = 0;
  1026  0145  1283               	bcf	3,5	;RP0=0, select bank0
  1027  0146  1303               	bcf	3,6	;RP1=0, select bank0
  1028  0147  1386               	bcf	6,7	;volatile
  1029  0148                     l722:	
  1030                           ;main.c: 114: while(tiempobk>=10){
  1031                           
  1032  0148  3000               	movlw	0
  1033  0149  0263               	subwf	convertirTiempo@tiempobk+1,w
  1034  014A  300A               	movlw	10
  1035  014B  1903               	skipnz
  1036  014C  0262               	subwf	convertirTiempo@tiempobk,w
  1037  014D  1C03               	btfss	3,0
  1038  014E  295C               	goto	l724
  1039                           
  1040                           ;main.c: 115: digTi1++;
  1041  014F  3001               	movlw	1
  1042  0150  00E1               	movwf	??_convertirTiempo
  1043  0151  0861               	movf	??_convertirTiempo,w
  1044  0152  07D0               	addwf	_digTi1,f
  1045                           
  1046                           ;main.c: 116: tiempobk = tiempobk - 10;
  1047  0153  0862               	movf	convertirTiempo@tiempobk,w
  1048  0154  3EF6               	addlw	246
  1049  0155  00E2               	movwf	convertirTiempo@tiempobk
  1050  0156  0863               	movf	convertirTiempo@tiempobk+1,w
  1051  0157  1803               	skipnc
  1052  0158  3E01               	addlw	1
  1053  0159  3EFF               	addlw	255
  1054  015A  00E3               	movwf	convertirTiempo@tiempobk+1
  1055  015B  2948               	goto	l722
  1056  015C                     l724:	
  1057                           
  1058                           ;main.c: 117: }
  1059                           ;main.c: 118: digTi0 = (uint8_t)tiempobk;
  1060  015C  0862               	movf	convertirTiempo@tiempobk,w
  1061  015D  00E1               	movwf	??_convertirTiempo
  1062  015E  0861               	movf	??_convertirTiempo,w
  1063  015F  00CF               	movwf	_digTi0
  1064                           
  1065                           ;main.c: 119: }
  1066  0160  298D               	goto	l91
  1067  0161                     l87:	
  1068                           
  1069                           ;main.c: 120: else{
  1070                           ;main.c: 121: RB7 = 1;
  1071  0161  1283               	bcf	3,5	;RP0=0, select bank0
  1072  0162  1303               	bcf	3,6	;RP1=0, select bank0
  1073  0163  1786               	bsf	6,7	;volatile
  1074  0164                     l728:	
  1075                           ;main.c: 122: while(tiempobk>=60){
  1076                           
  1077  0164  3000               	movlw	0
  1078  0165  0263               	subwf	convertirTiempo@tiempobk+1,w
  1079  0166  303C               	movlw	60
  1080  0167  1903               	skipnz
  1081  0168  0262               	subwf	convertirTiempo@tiempobk,w
  1082  0169  1C03               	btfss	3,0
  1083  016A  2978               	goto	l730
  1084                           
  1085                           ;main.c: 123: digTi1++;
  1086  016B  3001               	movlw	1
  1087  016C  00E1               	movwf	??_convertirTiempo
  1088  016D  0861               	movf	??_convertirTiempo,w
  1089  016E  07D0               	addwf	_digTi1,f
  1090                           
  1091                           ;main.c: 124: tiempobk = tiempobk -60;
  1092  016F  0862               	movf	convertirTiempo@tiempobk,w
  1093  0170  3EC4               	addlw	196
  1094  0171  00E2               	movwf	convertirTiempo@tiempobk
  1095  0172  0863               	movf	convertirTiempo@tiempobk+1,w
  1096  0173  1803               	skipnc
  1097  0174  3E01               	addlw	1
  1098  0175  3EFF               	addlw	255
  1099  0176  00E3               	movwf	convertirTiempo@tiempobk+1
  1100  0177  2964               	goto	l728
  1101  0178                     l730:	
  1102                           
  1103                           ;main.c: 125: }
  1104                           ;main.c: 126: digTi0 = 0;
  1105  0178  01CF               	clrf	_digTi0
  1106  0179                     l734:	
  1107                           ;main.c: 127: while (tiempobk>=10){
  1108                           
  1109  0179  3000               	movlw	0
  1110  017A  0263               	subwf	convertirTiempo@tiempobk+1,w
  1111  017B  300A               	movlw	10
  1112  017C  1903               	skipnz
  1113  017D  0262               	subwf	convertirTiempo@tiempobk,w
  1114  017E  1C03               	btfss	3,0
  1115  017F  298D               	goto	l91
  1116                           
  1117                           ;main.c: 128: digTi0++;
  1118  0180  3001               	movlw	1
  1119  0181  00E1               	movwf	??_convertirTiempo
  1120  0182  0861               	movf	??_convertirTiempo,w
  1121  0183  07CF               	addwf	_digTi0,f
  1122                           
  1123                           ;main.c: 129: tiempobk = tiempobk -10;
  1124  0184  0862               	movf	convertirTiempo@tiempobk,w
  1125  0185  3EF6               	addlw	246
  1126  0186  00E2               	movwf	convertirTiempo@tiempobk
  1127  0187  0863               	movf	convertirTiempo@tiempobk+1,w
  1128  0188  1803               	skipnc
  1129  0189  3E01               	addlw	1
  1130  018A  3EFF               	addlw	255
  1131  018B  00E3               	movwf	convertirTiempo@tiempobk+1
  1132  018C  2979               	goto	l734
  1133  018D                     l91:	
  1134                           
  1135                           ;main.c: 130: }
  1136                           ;main.c: 131: }
  1137                           ;main.c: 133: TMR1IE = 1;
  1138  018D  1683               	bsf	3,5	;RP0=1, select bank1
  1139  018E  1303               	bcf	3,6	;RP1=0, select bank1
  1140  018F  140C               	bsf	12,0	;volatile
  1141  0190  0008               	return
  1142  0191                     __end_of_convertirTiempo:	
  1143                           
  1144                           	psect	text5
  1145  01E5                     __ptext5:	
  1146 ;; *************** function _convertirTemp *****************
  1147 ;; Defined at:
  1148 ;;		line 86 in file "main.c"
  1149 ;; Parameters:    Size  Location     Type
  1150 ;;		None
  1151 ;; Auto vars:     Size  Location     Type
  1152 ;;  tempbk          2    7[COMMON] unsigned int 
  1153 ;; Return value:  Size  Location     Type
  1154 ;;		None               void
  1155 ;; Registers used:
  1156 ;;		wreg, status,2, status,0
  1157 ;; Tracked objects:
  1158 ;;		On entry : 0/0
  1159 ;;		On exit  : 0/0
  1160 ;;		Unchanged: 0/0
  1161 ;; Data sizes:     COMMON   BANK0   BANK1
  1162 ;;      Params:         0       0       0
  1163 ;;      Locals:         2       0       0
  1164 ;;      Temps:          1       0       0
  1165 ;;      Totals:         3       0       0
  1166 ;;Total ram usage:        3 bytes
  1167 ;; Hardware stack levels used:    1
  1168 ;; Hardware stack levels required when called:    3
  1169 ;; This function calls:
  1170 ;;		Nothing
  1171 ;; This function is called by:
  1172 ;;		_main
  1173 ;; This function uses a non-reentrant model
  1174 ;;
  1175                           
  1176                           
  1177                           ;psect for function _convertirTemp
  1178  01E5                     _convertirTemp:	
  1179                           
  1180                           ;main.c: 89: uint16_t tempbk;
  1181                           ;main.c: 90: TMR1IE = 0;
  1182                           
  1183                           ;incstack = 0
  1184                           ; Regs used in _convertirTemp: [wreg+status,2+status,0]
  1185  01E5  1683               	bsf	3,5	;RP0=1, select bank1
  1186  01E6  1303               	bcf	3,6	;RP1=0, select bank1
  1187  01E7  100C               	bcf	12,0	;volatile
  1188                           
  1189                           ;main.c: 91: digTe2 = 0;
  1190  01E8  01CE               	clrf	_digTe2
  1191                           
  1192                           ;main.c: 92: tempbk = temperatura;
  1193  01E9  0845               	movf	_temperatura+1,w
  1194  01EA  01E3               	clrf	convertirTemp@tempbk+1
  1195  01EB  07E3               	addwf	convertirTemp@tempbk+1,f
  1196  01EC  0844               	movf	_temperatura,w
  1197  01ED  01E2               	clrf	convertirTemp@tempbk
  1198  01EE  07E2               	addwf	convertirTemp@tempbk,f
  1199  01EF                     l698:	
  1200                           ;main.c: 93: while (tempbk>=100){
  1201                           
  1202  01EF  3000               	movlw	0
  1203  01F0  0263               	subwf	convertirTemp@tempbk+1,w
  1204  01F1  3064               	movlw	100
  1205  01F2  1903               	skipnz
  1206  01F3  0262               	subwf	convertirTemp@tempbk,w
  1207  01F4  1C03               	btfss	3,0
  1208  01F5  2A03               	goto	l700
  1209                           
  1210                           ;main.c: 94: tempbk=tempbk-100;
  1211  01F6  0862               	movf	convertirTemp@tempbk,w
  1212  01F7  3E9C               	addlw	156
  1213  01F8  00E2               	movwf	convertirTemp@tempbk
  1214  01F9  0863               	movf	convertirTemp@tempbk+1,w
  1215  01FA  1803               	skipnc
  1216  01FB  3E01               	addlw	1
  1217  01FC  3EFF               	addlw	255
  1218  01FD  00E3               	movwf	convertirTemp@tempbk+1
  1219                           
  1220                           ;main.c: 95: digTe2++;
  1221  01FE  3001               	movlw	1
  1222  01FF  00E1               	movwf	??_convertirTemp
  1223  0200  0861               	movf	??_convertirTemp,w
  1224  0201  07CE               	addwf	_digTe2,f
  1225  0202  29EF               	goto	l698
  1226  0203                     l700:	
  1227                           
  1228                           ;main.c: 96: }
  1229                           ;main.c: 97: digTe1 = 0;
  1230  0203  01CD               	clrf	_digTe1
  1231  0204                     l704:	
  1232                           ;main.c: 98: while (tempbk>=10){
  1233                           
  1234  0204  3000               	movlw	0
  1235  0205  0263               	subwf	convertirTemp@tempbk+1,w
  1236  0206  300A               	movlw	10
  1237  0207  1903               	skipnz
  1238  0208  0262               	subwf	convertirTemp@tempbk,w
  1239  0209  1C03               	btfss	3,0
  1240  020A  2A18               	goto	l706
  1241                           
  1242                           ;main.c: 99: tempbk=tempbk-10;
  1243  020B  0862               	movf	convertirTemp@tempbk,w
  1244  020C  3EF6               	addlw	246
  1245  020D  00E2               	movwf	convertirTemp@tempbk
  1246  020E  0863               	movf	convertirTemp@tempbk+1,w
  1247  020F  1803               	skipnc
  1248  0210  3E01               	addlw	1
  1249  0211  3EFF               	addlw	255
  1250  0212  00E3               	movwf	convertirTemp@tempbk+1
  1251                           
  1252                           ;main.c: 100: digTe1++;
  1253  0213  3001               	movlw	1
  1254  0214  00E1               	movwf	??_convertirTemp
  1255  0215  0861               	movf	??_convertirTemp,w
  1256  0216  07CD               	addwf	_digTe1,f
  1257  0217  2A04               	goto	l704
  1258  0218                     l706:	
  1259                           
  1260                           ;main.c: 101: }
  1261                           ;main.c: 102: digTe0 = (uint8_t)tempbk;
  1262  0218  0862               	movf	convertirTemp@tempbk,w
  1263  0219  00E1               	movwf	??_convertirTemp
  1264  021A  0861               	movf	??_convertirTemp,w
  1265  021B  00CC               	movwf	_digTe0
  1266                           
  1267                           ;main.c: 103: TMR1IE = 1;
  1268  021C  1683               	bsf	3,5	;RP0=1, select bank1
  1269  021D  1303               	bcf	3,6	;RP1=0, select bank1
  1270  021E  140C               	bsf	12,0	;volatile
  1271  021F  0008               	return
  1272  0220                     __end_of_convertirTemp:	
  1273                           
  1274                           	psect	text6
  1275  0220                     __ptext6:	
  1276 ;; *************** function _controltemp *****************
  1277 ;; Defined at:
  1278 ;;		line 74 in file "main.c"
  1279 ;; Parameters:    Size  Location     Type
  1280 ;;		None
  1281 ;; Auto vars:     Size  Location     Type
  1282 ;;		None
  1283 ;; Return value:  Size  Location     Type
  1284 ;;		None               void
  1285 ;; Registers used:
  1286 ;;		wreg
  1287 ;; Tracked objects:
  1288 ;;		On entry : 0/0
  1289 ;;		On exit  : 0/0
  1290 ;;		Unchanged: 0/0
  1291 ;; Data sizes:     COMMON   BANK0   BANK1
  1292 ;;      Params:         0       0       0
  1293 ;;      Locals:         0       0       0
  1294 ;;      Temps:          1       0       0
  1295 ;;      Totals:         1       0       0
  1296 ;;Total ram usage:        1 bytes
  1297 ;; Hardware stack levels used:    1
  1298 ;; Hardware stack levels required when called:    3
  1299 ;; This function calls:
  1300 ;;		Nothing
  1301 ;; This function is called by:
  1302 ;;		_main
  1303 ;; This function uses a non-reentrant model
  1304 ;;
  1305                           
  1306                           
  1307                           ;psect for function _controltemp
  1308  0220                     _controltemp:	
  1309                           
  1310                           ;main.c: 75: if(termocupla < temperatura){
  1311                           
  1312                           ;incstack = 0
  1313                           ; Regs used in _controltemp: [wreg]
  1314  0220  0845               	movf	_temperatura+1,w
  1315  0221  0247               	subwf	_termocupla+1,w
  1316  0222  1D03               	skipz
  1317  0223  2A26               	goto	u15
  1318  0224  0844               	movf	_temperatura,w
  1319  0225  0246               	subwf	_termocupla,w
  1320  0226                     u15:	
  1321  0226  1803               	skipnc
  1322  0227  2A2B               	goto	l684
  1323                           
  1324                           ;main.c: 76: myflags.b1 = 1;
  1325  0228  14D2               	bsf	_myflags,1
  1326                           
  1327                           ;main.c: 77: myflags.b2 = 0;
  1328  0229  1152               	bcf	_myflags,2
  1329                           
  1330                           ;main.c: 78: }
  1331  022A  0008               	return
  1332  022B                     l684:	
  1333                           
  1334                           ;main.c: 79: else{
  1335                           ;main.c: 80: t_apagado = 15;
  1336  022B  300F               	movlw	15
  1337  022C  00E1               	movwf	??_controltemp
  1338  022D  0861               	movf	??_controltemp,w
  1339  022E  00D3               	movwf	_t_apagado
  1340                           
  1341                           ;main.c: 81: myflags.b2 = 1;
  1342  022F  1552               	bsf	_myflags,2
  1343                           
  1344                           ;main.c: 82: myflags.b1 = 0;
  1345  0230  10D2               	bcf	_myflags,1
  1346  0231  0008               	return
  1347  0232                     __end_of_controltemp:	
  1348                           
  1349                           	psect	text7
  1350  0263                     __ptext7:	
  1351 ;; *************** function _apagar *****************
  1352 ;; Defined at:
  1353 ;;		line 70 in file "main.c"
  1354 ;; Parameters:    Size  Location     Type
  1355 ;;		None
  1356 ;; Auto vars:     Size  Location     Type
  1357 ;;		None
  1358 ;; Return value:  Size  Location     Type
  1359 ;;		None               void
  1360 ;; Registers used:
  1361 ;;		None
  1362 ;; Tracked objects:
  1363 ;;		On entry : 0/0
  1364 ;;		On exit  : 0/0
  1365 ;;		Unchanged: 0/0
  1366 ;; Data sizes:     COMMON   BANK0   BANK1
  1367 ;;      Params:         0       0       0
  1368 ;;      Locals:         0       0       0
  1369 ;;      Temps:          0       0       0
  1370 ;;      Totals:         0       0       0
  1371 ;;Total ram usage:        0 bytes
  1372 ;; Hardware stack levels used:    1
  1373 ;; Hardware stack levels required when called:    3
  1374 ;; This function calls:
  1375 ;;		Nothing
  1376 ;; This function is called by:
  1377 ;;		_main
  1378 ;; This function uses a non-reentrant model
  1379 ;;
  1380                           
  1381                           
  1382                           ;psect for function _apagar
  1383  0263                     _apagar:	
  1384                           
  1385                           ;main.c: 71: myflags.b0 = 0;
  1386                           
  1387                           ;incstack = 0
  1388                           ; Regs used in _apagar: []
  1389  0263  1052               	bcf	_myflags,0
  1390  0264  0008               	return
  1391  0265                     __end_of_apagar:	
  1392                           
  1393                           	psect	text8
  1394  0232                     __ptext8:	
  1395 ;; *************** function _isr *****************
  1396 ;; Defined at:
  1397 ;;		line 74 in file "interrupts.c"
  1398 ;; Parameters:    Size  Location     Type
  1399 ;;		None
  1400 ;; Auto vars:     Size  Location     Type
  1401 ;;		None
  1402 ;; Return value:  Size  Location     Type
  1403 ;;		None               void
  1404 ;; Registers used:
  1405 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1406 ;; Tracked objects:
  1407 ;;		On entry : 0/0
  1408 ;;		On exit  : 0/0
  1409 ;;		Unchanged: 0/0
  1410 ;; Data sizes:     COMMON   BANK0   BANK1
  1411 ;;      Params:         0       0       0
  1412 ;;      Locals:         0       0       0
  1413 ;;      Temps:          4       0       0
  1414 ;;      Totals:         4       0       0
  1415 ;;Total ram usage:        4 bytes
  1416 ;; Hardware stack levels used:    1
  1417 ;; Hardware stack levels required when called:    2
  1418 ;; This function calls:
  1419 ;;		_timer1
  1420 ;; This function is called by:
  1421 ;;		Interrupt level 1
  1422 ;; This function uses a non-reentrant model
  1423 ;;
  1424                           
  1425                           
  1426                           ;psect for function _isr
  1427  0232                     _isr:	
  1428                           
  1429                           ;interrupts.c: 76: if (TMR1IF){
  1430  0232  1C0C               	btfss	12,0	;volatile
  1431  0233  2A38               	goto	i1l215
  1432                           
  1433                           ;interrupts.c: 77: timer1();
  1434  0234  201D               	fcall	_timer1
  1435                           
  1436                           ;interrupts.c: 78: TMR1IF = 0;
  1437  0235  1283               	bcf	3,5	;RP0=0, select bank0
  1438  0236  1303               	bcf	3,6	;RP1=0, select bank0
  1439  0237  100C               	bcf	12,0	;volatile
  1440  0238                     i1l215:	
  1441  0238  0860               	movf	??_isr+3,w
  1442  0239  00FF               	movwf	127
  1443  023A  085F               	movf	??_isr+2,w
  1444  023B  008A               	movwf	10
  1445  023C  085E               	movf	??_isr+1,w
  1446  023D  0084               	movwf	4
  1447  023E  0E5D               	swapf	??_isr^(0+-128),w
  1448  023F  0083               	movwf	3
  1449  0240  0EFE               	swapf	126,f
  1450  0241  0E7E               	swapf	126,w
  1451  0242  0009               	retfie
  1452  0243                     __end_of_isr:	
  1453                           
  1454                           	psect	intentry
  1455  0004                     __pintentry:	
  1456                           ;incstack = 0
  1457                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1458                           
  1459  0004                     interrupt_function:	
  1460  007E                     saved_w	set	btemp
  1461  0004  00FE               	movwf	btemp
  1462  0005  0E03               	swapf	3,w
  1463  0006  00DD               	movwf	??_isr
  1464  0007  0804               	movf	4,w
  1465  0008  00DE               	movwf	??_isr+1
  1466  0009  080A               	movf	10,w
  1467  000A  00DF               	movwf	??_isr+2
  1468  000B  1283               	bcf	3,5	;RP0=0, select bank0
  1469  000C  1303               	bcf	3,6	;RP1=0, select bank0
  1470  000D  087F               	movf	btemp+1,w
  1471  000E  00E0               	movwf	??_isr+3
  1472  000F  2A32               	ljmp	_isr
  1473                           
  1474                           	psect	text9
  1475  001D                     __ptext9:	
  1476 ;; *************** function _timer1 *****************
  1477 ;; Defined at:
  1478 ;;		line 21 in file "interrupts.c"
  1479 ;; Parameters:    Size  Location     Type
  1480 ;;		None
  1481 ;; Auto vars:     Size  Location     Type
  1482 ;;		None
  1483 ;; Return value:  Size  Location     Type
  1484 ;;		None               void
  1485 ;; Registers used:
  1486 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1487 ;; Tracked objects:
  1488 ;;		On entry : 0/0
  1489 ;;		On exit  : 0/0
  1490 ;;		Unchanged: 0/0
  1491 ;; Data sizes:     COMMON   BANK0   BANK1
  1492 ;;      Params:         0       0       0
  1493 ;;      Locals:         0       0       0
  1494 ;;      Temps:          2       0       0
  1495 ;;      Totals:         2       0       0
  1496 ;;Total ram usage:        2 bytes
  1497 ;; Hardware stack levels used:    1
  1498 ;; Hardware stack levels required when called:    1
  1499 ;; This function calls:
  1500 ;;		_toggleLatch
  1501 ;; This function is called by:
  1502 ;;		_isr
  1503 ;; This function uses a non-reentrant model
  1504 ;;
  1505                           
  1506                           
  1507                           ;psect for function _timer1
  1508  001D                     _timer1:	
  1509                           
  1510                           ;interrupts.c: 22: static uint8_t numDisplay;
  1511                           ;interrupts.c: 23: TMR1 = 65535 - 2000 + TMR1;
  1512                           
  1513                           ;incstack = 0
  1514                           ; Regs used in _timer1: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1515  001D  1283               	bcf	3,5	;RP0=0, select bank0
  1516  001E  1303               	bcf	3,6	;RP1=0, select bank0
  1517  001F  080E               	movf	14,w	;volatile
  1518  0020  3E2F               	addlw	47
  1519  0021  00DB               	movwf	??_timer1
  1520  0022  080F               	movf	15,w	;volatile
  1521  0023  1803               	skipnc
  1522  0024  3E01               	addlw	1
  1523  0025  3EF8               	addlw	248
  1524  0026  00DC               	movwf	??_timer1+1
  1525  0027  085B               	movf	??_timer1,w
  1526  0028  008E               	movwf	14	;volatile
  1527  0029  085C               	movf	??_timer1+1,w
  1528  002A  008F               	movwf	15	;volatile
  1529                           
  1530                           ;interrupts.c: 24: if(t_inputs) t_inputs--;
  1531  002B  0854               	movf	_t_inputs,w
  1532  002C  1903               	btfsc	3,2
  1533  002D  2830               	goto	i1l194
  1534  002E  3001               	movlw	1
  1535  002F  02D4               	subwf	_t_inputs,f
  1536  0030                     i1l194:	
  1537                           
  1538                           ;interrupts.c: 25: if(++numDisplay == 5) numDisplay = 0;
  1539  0030  3001               	movlw	1
  1540  0031  00DB               	movwf	??_timer1
  1541  0032  085B               	movf	??_timer1,w
  1542  0033  07DA               	addwf	timer1@numDisplay,f
  1543  0034  085A               	movf	timer1@numDisplay,w
  1544  0035  3A05               	xorlw	5
  1545  0036  1903               	btfsc	3,2
  1546  0037  01DA               	clrf	timer1@numDisplay
  1547                           
  1548                           ;interrupts.c: 26: if(t_resistencias) t_resistencias--;
  1549  0038  0843               	movf	_t_resistencias+1,w
  1550  0039  0442               	iorwf	_t_resistencias,w
  1551  003A  1903               	skipnz
  1552  003B  2842               	goto	i1l196
  1553  003C  3001               	movlw	1
  1554  003D  02C2               	subwf	_t_resistencias,f
  1555  003E  3000               	movlw	0
  1556  003F  1C03               	skipc
  1557  0040  03C3               	decf	_t_resistencias+1,f
  1558  0041  02C3               	subwf	_t_resistencias+1,f
  1559  0042                     i1l196:	
  1560                           
  1561                           ;interrupts.c: 27: if(t_milisegundos) t_milisegundos--;
  1562  0042  0867               	movf	_t_milisegundos+1,w
  1563  0043  0466               	iorwf	_t_milisegundos,w
  1564  0044  1903               	skipnz
  1565  0045  284D               	goto	i1l790
  1566  0046  3001               	movlw	1
  1567  0047  02E6               	subwf	_t_milisegundos,f
  1568  0048  3000               	movlw	0
  1569  0049  1C03               	skipc
  1570  004A  03E7               	decf	_t_milisegundos+1,f
  1571  004B  02E7               	subwf	_t_milisegundos+1,f
  1572  004C  2862               	goto	i1l198
  1573  004D                     i1l790:	
  1574                           
  1575                           ;interrupts.c: 28: else {
  1576                           ;interrupts.c: 29: t_milisegundos = 1000;
  1577  004D  30E8               	movlw	232
  1578  004E  00E6               	movwf	_t_milisegundos
  1579  004F  3003               	movlw	3
  1580  0050  00E7               	movwf	_t_milisegundos+1
  1581                           
  1582                           ;interrupts.c: 30: if(t_apagado) t_apagado--;
  1583  0051  0853               	movf	_t_apagado,w
  1584  0052  1903               	btfsc	3,2
  1585  0053  2856               	goto	i1l794
  1586  0054  3001               	movlw	1
  1587  0055  02D3               	subwf	_t_apagado,f
  1588  0056                     i1l794:	
  1589                           
  1590                           ;interrupts.c: 31: if(myflags.b0){
  1591  0056  1C52               	btfss	_myflags,0
  1592  0057  2862               	goto	i1l198
  1593                           
  1594                           ;interrupts.c: 32: if(tiempo) tiempo--;
  1595  0058  0849               	movf	_tiempo+1,w
  1596  0059  0448               	iorwf	_tiempo,w
  1597  005A  1903               	skipnz
  1598  005B  2862               	goto	i1l198
  1599  005C  3001               	movlw	1
  1600  005D  02C8               	subwf	_tiempo,f
  1601  005E  3000               	movlw	0
  1602  005F  1C03               	skipc
  1603  0060  03C9               	decf	_tiempo+1,f
  1604  0061  02C9               	subwf	_tiempo+1,f
  1605  0062                     i1l198:	
  1606                           
  1607                           ;interrupts.c: 33: }
  1608                           ;interrupts.c: 34: }
  1609                           ;interrupts.c: 35: if(t_btnpress) t_btnpress--;
  1610  0062  0841               	movf	_t_btnpress+1,w
  1611  0063  0440               	iorwf	_t_btnpress,w
  1612  0064  1903               	skipnz
  1613  0065  28AB               	goto	i1l846
  1614  0066  3001               	movlw	1
  1615  0067  02C0               	subwf	_t_btnpress,f
  1616  0068  3000               	movlw	0
  1617  0069  1C03               	skipc
  1618  006A  03C1               	decf	_t_btnpress+1,f
  1619  006B  02C1               	subwf	_t_btnpress+1,f
  1620                           
  1621                           ;interrupts.c: 36: switch (numDisplay){
  1622  006C  28AB               	goto	i1l846
  1623  006D                     i1l802:	
  1624                           ;interrupts.c: 37: case 0:
  1625                           
  1626                           
  1627                           ;interrupts.c: 38: PORTA = (PORTA&0xF0) | digTe0;
  1628  006D  1283               	bcf	3,5	;RP0=0, select bank0
  1629  006E  1303               	bcf	3,6	;RP1=0, select bank0
  1630  006F  0805               	movf	5,w	;volatile
  1631  0070  39F0               	andlw	240
  1632  0071  044C               	iorwf	_digTe0,w
  1633  0072  0085               	movwf	5	;volatile
  1634                           
  1635                           ;interrupts.c: 39: RA0 = 0;
  1636  0073  1005               	bcf	5,0	;volatile
  1637                           
  1638                           ;interrupts.c: 40: toggleLatch();
  1639  0074  2243               	fcall	_toggleLatch
  1640                           
  1641                           ;interrupts.c: 41: RA5 = 1;
  1642  0075  1283               	bcf	3,5	;RP0=0, select bank0
  1643  0076  1303               	bcf	3,6	;RP1=0, select bank0
  1644  0077  1685               	bsf	5,5	;volatile
  1645                           
  1646                           ;interrupts.c: 42: break;
  1647  0078  0008               	return
  1648  0079                     i1l810:	
  1649                           ;interrupts.c: 43: case 1:
  1650                           
  1651                           
  1652                           ;interrupts.c: 44: PORTA = (PORTA&0xF0) | digTe1;
  1653  0079  1283               	bcf	3,5	;RP0=0, select bank0
  1654  007A  1303               	bcf	3,6	;RP1=0, select bank0
  1655  007B  0805               	movf	5,w	;volatile
  1656  007C  39F0               	andlw	240
  1657  007D  044D               	iorwf	_digTe1,w
  1658  007E  0085               	movwf	5	;volatile
  1659                           
  1660                           ;interrupts.c: 45: RA5 = 0;
  1661  007F  1285               	bcf	5,5	;volatile
  1662                           
  1663                           ;interrupts.c: 46: toggleLatch();
  1664  0080  2243               	fcall	_toggleLatch
  1665                           
  1666                           ;interrupts.c: 47: RA3 = 1;
  1667  0081  1283               	bcf	3,5	;RP0=0, select bank0
  1668  0082  1303               	bcf	3,6	;RP1=0, select bank0
  1669  0083  1585               	bsf	5,3	;volatile
  1670                           
  1671                           ;interrupts.c: 48: break;
  1672  0084  0008               	return
  1673  0085                     i1l818:	
  1674                           ;interrupts.c: 49: case 2:
  1675                           
  1676                           
  1677                           ;interrupts.c: 50: PORTA = (PORTA&0xF0) | digTe2;
  1678  0085  1283               	bcf	3,5	;RP0=0, select bank0
  1679  0086  1303               	bcf	3,6	;RP1=0, select bank0
  1680  0087  0805               	movf	5,w	;volatile
  1681  0088  39F0               	andlw	240
  1682  0089  044E               	iorwf	_digTe2,w
  1683  008A  0085               	movwf	5	;volatile
  1684                           
  1685                           ;interrupts.c: 51: RA3 = 0;
  1686  008B  1185               	bcf	5,3	;volatile
  1687                           
  1688                           ;interrupts.c: 52: toggleLatch();
  1689  008C  2243               	fcall	_toggleLatch
  1690                           
  1691                           ;interrupts.c: 53: RA2 = 1;
  1692  008D  1283               	bcf	3,5	;RP0=0, select bank0
  1693  008E  1303               	bcf	3,6	;RP1=0, select bank0
  1694  008F  1505               	bsf	5,2	;volatile
  1695                           
  1696                           ;interrupts.c: 54: break;
  1697  0090  0008               	return
  1698  0091                     i1l826:	
  1699                           ;interrupts.c: 55: case 3:
  1700                           
  1701                           
  1702                           ;interrupts.c: 56: PORTA = (PORTA&0xF0) | digTi0;
  1703  0091  1283               	bcf	3,5	;RP0=0, select bank0
  1704  0092  1303               	bcf	3,6	;RP1=0, select bank0
  1705  0093  0805               	movf	5,w	;volatile
  1706  0094  39F0               	andlw	240
  1707  0095  044F               	iorwf	_digTi0,w
  1708  0096  0085               	movwf	5	;volatile
  1709                           
  1710                           ;interrupts.c: 57: RA2 = 0;
  1711  0097  1105               	bcf	5,2	;volatile
  1712                           
  1713                           ;interrupts.c: 58: toggleLatch();
  1714  0098  2243               	fcall	_toggleLatch
  1715                           
  1716                           ;interrupts.c: 59: RA1 = 1;
  1717  0099  1283               	bcf	3,5	;RP0=0, select bank0
  1718  009A  1303               	bcf	3,6	;RP1=0, select bank0
  1719  009B  1485               	bsf	5,1	;volatile
  1720                           
  1721                           ;interrupts.c: 60: break;
  1722  009C  0008               	return
  1723  009D                     i1l834:	
  1724                           ;interrupts.c: 61: case 4:
  1725                           
  1726                           
  1727                           ;interrupts.c: 62: PORTA = (PORTA&0xF0) | digTi1;
  1728  009D  1283               	bcf	3,5	;RP0=0, select bank0
  1729  009E  1303               	bcf	3,6	;RP1=0, select bank0
  1730  009F  0805               	movf	5,w	;volatile
  1731  00A0  39F0               	andlw	240
  1732  00A1  0450               	iorwf	_digTi1,w
  1733  00A2  0085               	movwf	5	;volatile
  1734                           
  1735                           ;interrupts.c: 63: RA5 = 0;
  1736  00A3  1285               	bcf	5,5	;volatile
  1737                           
  1738                           ;interrupts.c: 64: toggleLatch();
  1739  00A4  2243               	fcall	_toggleLatch
  1740                           
  1741                           ;interrupts.c: 65: RA0 = 1;
  1742  00A5  1283               	bcf	3,5	;RP0=0, select bank0
  1743  00A6  1303               	bcf	3,6	;RP1=0, select bank0
  1744  00A7  1405               	bsf	5,0	;volatile
  1745                           
  1746                           ;interrupts.c: 66: break;
  1747  00A8  0008               	return
  1748  00A9                     i1l842:	
  1749                           ;interrupts.c: 67: default:
  1750                           
  1751                           
  1752                           ;interrupts.c: 68: numDisplay = 0;
  1753  00A9  01DA               	clrf	timer1@numDisplay
  1754                           
  1755                           ;interrupts.c: 70: }
  1756                           
  1757                           ;interrupts.c: 69: break;
  1758  00AA  0008               	return
  1759  00AB                     i1l846:	
  1760  00AB  085A               	movf	timer1@numDisplay,w
  1761                           
  1762                           ; Switch size 1, requested type "space"
  1763                           ; Number of cases is 5, Range of values is 0 to 4
  1764                           ; switch strategies available:
  1765                           ; Name         Instructions Cycles
  1766                           ; direct_byte           11     6 (fixed)
  1767                           ; simple_byte           16     9 (average)
  1768                           ; jumptable            260     6 (fixed)
  1769                           ;	Chosen strategy is direct_byte
  1770  00AC  0084               	movwf	4
  1771  00AD  3005               	movlw	5
  1772  00AE  0204               	subwf	4,w
  1773  00AF  1803               	skipnc
  1774  00B0  28A9               	goto	i1l842
  1775  00B1  3002               	movlw	high i1S960
  1776  00B2  008A               	movwf	10
  1777  00B3  3059               	movlw	low i1S960
  1778  00B4  0704               	addwf	4,w
  1779  00B5  0082               	movwf	2
  1780  00B6  0008               	return
  1781  00B7                     __end_of_timer1:	
  1782                           
  1783                           	psect	swtext1
  1784  0259                     __pswtext1:	
  1785  0259                     i1S960:	
  1786  0259  286D               	ljmp	i1l802
  1787  025A  2879               	ljmp	i1l810
  1788  025B  2885               	ljmp	i1l818
  1789  025C  2891               	ljmp	i1l826
  1790  025D  289D               	ljmp	i1l834
  1791                           
  1792                           	psect	text10
  1793  0243                     __ptext10:	
  1794 ;; *************** function _toggleLatch *****************
  1795 ;; Defined at:
  1796 ;;		line 14 in file "interrupts.c"
  1797 ;; Parameters:    Size  Location     Type
  1798 ;;		None
  1799 ;; Auto vars:     Size  Location     Type
  1800 ;;		None
  1801 ;; Return value:  Size  Location     Type
  1802 ;;		None               void
  1803 ;; Registers used:
  1804 ;;		None
  1805 ;; Tracked objects:
  1806 ;;		On entry : 0/0
  1807 ;;		On exit  : 0/0
  1808 ;;		Unchanged: 0/0
  1809 ;; Data sizes:     COMMON   BANK0   BANK1
  1810 ;;      Params:         0       0       0
  1811 ;;      Locals:         0       0       0
  1812 ;;      Temps:          0       0       0
  1813 ;;      Totals:         0       0       0
  1814 ;;Total ram usage:        0 bytes
  1815 ;; Hardware stack levels used:    1
  1816 ;; This function calls:
  1817 ;;		Nothing
  1818 ;; This function is called by:
  1819 ;;		_timer1
  1820 ;; This function uses a non-reentrant model
  1821 ;;
  1822                           
  1823                           
  1824                           ;psect for function _toggleLatch
  1825  0243                     _toggleLatch:	
  1826                           
  1827                           ;interrupts.c: 15: RB0 = 0;
  1828                           
  1829                           ;incstack = 0
  1830                           ; Regs used in _toggleLatch: []
  1831  0243  1283               	bcf	3,5	;RP0=0, select bank0
  1832  0244  1303               	bcf	3,6	;RP1=0, select bank0
  1833  0245  1006               	bcf	6,0	;volatile
  1834                           
  1835                           ;interrupts.c: 16: __nop();
  1836  0246  0000               	nop
  1837                           
  1838                           ;interrupts.c: 17: __nop();
  1839  0247  0000               	nop
  1840                           
  1841                           ;interrupts.c: 18: RB0 = 1;
  1842  0248  1283               	bcf	3,5	;RP0=0, select bank0
  1843  0249  1303               	bcf	3,6	;RP1=0, select bank0
  1844  024A  1406               	bsf	6,0	;volatile
  1845  024B  0008               	return
  1846  024C                     __end_of_toggleLatch:	
  1847  007E                     btemp	set	126	;btemp
  1848  007E                     wtemp	set	126
  1849  007E                     wtemp0	set	126
  1850  0080                     wtemp1	set	128
  1851  0082                     wtemp2	set	130
  1852  0084                     wtemp3	set	132
  1853  0086                     wtemp4	set	134
  1854  0088                     wtemp5	set	136
  1855  007F                     wtemp6	set	127
  1856  007E                     ttemp	set	126
  1857  007E                     ttemp0	set	126
  1858  0081                     ttemp1	set	129
  1859  0084                     ttemp2	set	132
  1860  0087                     ttemp3	set	135
  1861  007F                     ttemp4	set	127
  1862  007E                     ltemp	set	126
  1863  007E                     ltemp0	set	126
  1864  0082                     ltemp1	set	130
  1865  0086                     ltemp2	set	134
  1866  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        3
    BSS         27
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           62     11      41
    BANK0            32      0       0
    BANK1            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_convertirTemp
    _main->_convertirTiempo
    _main->_verteclas

Critical Paths under _isr in COMMON

    _isr->_timer1

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     225
                                              9 COMMON     2     2      0
                             _apagar
                        _controltemp
                      _convertirTemp
                    _convertirTiempo
                           _encender
                          _verteclas
 ---------------------------------------------------------------------------------
 (1) _verteclas                                            3     3      0      30
                                              6 COMMON     3     3      0
                        _delay_100us
 ---------------------------------------------------------------------------------
 (2) _delay_100us                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _encender                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _convertirTiempo                                      3     3      0     105
                                              6 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _convertirTemp                                        3     3      0      75
                                              6 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _controltemp                                          1     1      0       0
                                              6 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _apagar                                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _isr                                                  4     4      0       0
                                              2 COMMON     4     4      0
                             _timer1
 ---------------------------------------------------------------------------------
 (4) _timer1                                               2     2      0       0
                                              0 COMMON     2     2      0
                        _toggleLatch
 ---------------------------------------------------------------------------------
 (5) _toggleLatch                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _apagar
   _controltemp
   _convertirTemp
   _convertirTiempo
   _encender
   _verteclas
     _delay_100us

 _isr (ROOT)
   _timer1
     _toggleLatch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               20      0       0       7        0.0%
BITBANK1            20      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               20      0       0       3        0.0%
BITBANK0            20      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON              3E      B      29       1       66.1%
BITCOMMON           3E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      29       8        0.0%
ABS                  0      0      29       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.31 build 56723 
Symbol Table                                                                                   Thu Apr 24 00:06:55 2014

                       pc 0002                        l91 018D                        l87 0161  
                      u15 0226                        fsr 0004                       l106 01C4  
                     l118 00C5                       l700 0203                       l704 0204  
                     l706 0218                       l730 0178                       l722 0148  
                     l724 015C                       l734 0179                       l750 01B8  
                     l902 0104                       l728 0164                       l760 01CA  
                     l920 011F                       l904 0108                       l754 01BE  
                     l746 01AF                       l930 0131                       l684 022B  
                     l764 01D0                       l772 01DC                       l916 011D  
                     l908 010A                       l870 00DB                       l768 01D6  
                     l928 012D                       l880 00E3                       l698 01EF  
                     l890 00F4                       l882 00E4                       l894 00F6  
                     l878 00E2                       _GIE 005F                       _RA0 0028  
                     _RA1 0029                       _RB0 0030                       _RA2 002A  
                     _RA3 002B                       _RA5 002D                       _RB7 0037  
                     u375 0119                       _aux 004A                       _isr 0232  
                     fsr0 0004                       indf 0000                      ?_isr 005B  
            ?_controltemp 005B                      _PEIE 005E                      _TMR1 000E  
        timer1@numDisplay 005A                      _main 00B7                      btemp 007E  
                    ltemp 007E                      start 0010                      ttemp 007E  
                    wtemp 007E              main@banderas 0065                     ??_isr 005D  
                   ?_main 005B                     i1S960 0259             _convertirTemp 01E5  
                   i1l215 0238                     i1l194 0030                     i1l196 0042  
                   i1l198 0062                     i1l810 0079                     i1l802 006D  
                   i1l842 00A9                     i1l834 009D                     i1l826 0091  
                   i1l818 0085                     i1l846 00AB                     i1l790 004D  
                   i1l794 0056                     _PORTA 0005                     _TRISA 0085  
    __size_of_delay_100us 0005         ??_convertirTiempo 0061                     pclath 000A  
                   ltemp0 007E                     ltemp1 0082                     ltemp2 0086  
                   ltemp3 0080                     ttemp0 007E                     ttemp1 0081  
                   ttemp2 0084                     ttemp3 0087                     ttemp4 007F  
                   status 0003                     wtemp0 007E                     wtemp1 0080  
                   wtemp2 0082                     wtemp3 0084                     wtemp4 0086  
                   wtemp5 0088                     wtemp6 007F           __initialization 0011  
            __end_of_main 0134            ?_convertirTemp 005B                    ??_main 0064  
          _t_milisegundos 0066                    _ADCON1 009F                    _TMR1IE 0460  
                  _TMR1IF 0060                    _TMR1ON 0080          __end_of_encender 0263  
                  _digTe0 004C                    _digTe1 004D                    _digTe2 004E  
                  _digTi0 004F                    _digTi1 0050                    _apagar 0263  
                  _tempd0 0055                    _tempd1 0056                    _tempd2 0057  
                  _timed0 0058                    _timed1 0059                    _timer1 001D  
                  _tiempo 0048              __pdataCOMMON 0066                    saved_w 007E  
 __end_of__initialization 001B              ?_toggleLatch 005B      __size_of_controltemp 0012  
          __pcstackCOMMON 005B           ??_convertirTemp 0061        verteclas@puertoabk 0063  
              _decremento 0256            _t_resistencias 0042                __pmaintext 00B7  
                 ?_apagar 005B                __pintentry 0004                   ?_timer1 005B  
         _convertirTiempo 0134        __size_of_verteclas 0054                 ?_encender 005B  
         __size_of_apagar 0002                   __ptext1 0191                   __ptext2 0254  
                 __ptext3 0261                   __ptext4 0134                   __ptext5 01E5  
                 __ptext6 0220                   __ptext7 0263                   __ptext8 0232  
                 __ptext9 001D           __size_of_timer1 009A              __size_of_isr 0011  
           ??_delay_100us 0061                   _myflags 0052                ??_encender 0061  
              _t_btnpress 0040                   clrloop0 024D      end_of_initialization 001B  
    __size_of_toggleLatch 0009   __end_of_convertirTiempo 0191         __end_of_verteclas 01E5  
              _termocupla 0046       __end_of_delay_100us 0259            __end_of_apagar 0265  
           __pidataCOMMON 025E            __end_of_timer1 00B7       start_initialization 0011  
             __end_of_isr 0243       verteclas@old_teclas 0068             ??_controltemp 0061  
                ??_apagar 0061          ?_convertirTiempo 005B                  ??_timer1 005B  
   __end_of_convertirTemp 0220               __pbssCOMMON 0040                 ___latbits 0000  
             _delay_100us 0254       convertirTemp@tempbk 0062         __size_of_encender 0002  
     __end_of_controltemp 0232                 __pswtext1 0259                 _t_apagado 0053  
       interrupt_function 0004                 clear_ram0 024C                 _verteclas 0191  
 convertirTiempo@tiempobk 0062               _controltemp 0220             ??_toggleLatch 005B  
              ?_verteclas 005B          verteclas@trisabk 0062                  __ptext10 0243  
                _encender 0261             _bloq_entradas 004B                  _entradas 0051  
           __size_of_main 007D                  _t_inputs 0054       __end_of_toggleLatch 024C  
            ?_delay_100us 005B                  intlevel1 0000               ??_verteclas 0061  
             _temperatura 0044  __size_of_convertirTiempo 005D               _toggleLatch 0243  
  __size_of_convertirTemp 003B  
